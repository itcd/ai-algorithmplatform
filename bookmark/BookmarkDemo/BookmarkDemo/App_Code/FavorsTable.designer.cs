#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行库版本:2.0.50727.1433
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[System.Data.Linq.Mapping.DatabaseAttribute(Name="bookmark")]
public partial class FavorsTableDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertAppraiseOfWebSite(AppraiseOfWebSite instance);
  partial void UpdateAppraiseOfWebSite(AppraiseOfWebSite instance);
  partial void DeleteAppraiseOfWebSite(AppraiseOfWebSite instance);
  partial void InsertFavors(Favors instance);
  partial void UpdateFavors(Favors instance);
  partial void DeleteFavors(Favors instance);
  #endregion
	
	public FavorsTableDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["bookmarkConnectionString1"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public FavorsTableDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FavorsTableDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FavorsTableDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public FavorsTableDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<AppraiseOfWebSite> AppraiseOfWebSite
	{
		get
		{
			return this.GetTable<AppraiseOfWebSite>();
		}
	}
	
	public System.Data.Linq.Table<Favors> Favors
	{
		get
		{
			return this.GetTable<Favors>();
		}
	}
}

[Table(Name="dbo.AppraiseOfWebSite")]
public partial class AppraiseOfWebSite : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SiteID;
	
	private string _Href;
	
	private string _Titles;
	
	private string _TitlesCount;
	
	private string _Tags;
	
	private string _TagsCount;
	
	private System.Nullable<short> _FavorLevel;
	
	private System.Nullable<short> _QueryFrequency;
	
	private string _Remarks;
	
	private string _RemarksCount;
	
	private string _ImageUrl;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSiteIDChanging(int value);
    partial void OnSiteIDChanged();
    partial void OnHrefChanging(string value);
    partial void OnHrefChanged();
    partial void OnTitlesChanging(string value);
    partial void OnTitlesChanged();
    partial void OnTitlesCountChanging(string value);
    partial void OnTitlesCountChanged();
    partial void OnTagsChanging(string value);
    partial void OnTagsChanged();
    partial void OnTagsCountChanging(string value);
    partial void OnTagsCountChanged();
    partial void OnFavorLevelChanging(System.Nullable<short> value);
    partial void OnFavorLevelChanged();
    partial void OnQueryFrequencyChanging(System.Nullable<short> value);
    partial void OnQueryFrequencyChanged();
    partial void OnRemarksChanging(string value);
    partial void OnRemarksChanged();
    partial void OnRemarksCountChanging(string value);
    partial void OnRemarksCountChanged();
    partial void OnImageUrlChanging(string value);
    partial void OnImageUrlChanged();
    #endregion
	
	public AppraiseOfWebSite()
	{
		OnCreated();
	}
	
	[Column(Storage="_SiteID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SiteID
	{
		get
		{
			return this._SiteID;
		}
		set
		{
			if ((this._SiteID != value))
			{
				this.OnSiteIDChanging(value);
				this.SendPropertyChanging();
				this._SiteID = value;
				this.SendPropertyChanged("SiteID");
				this.OnSiteIDChanged();
			}
		}
	}
	
	[Column(Storage="_Href", DbType="VarChar(500) NOT NULL", CanBeNull=false)]
	public string Href
	{
		get
		{
			return this._Href;
		}
		set
		{
			if ((this._Href != value))
			{
				this.OnHrefChanging(value);
				this.SendPropertyChanging();
				this._Href = value;
				this.SendPropertyChanged("Href");
				this.OnHrefChanged();
			}
		}
	}
	
	[Column(Storage="_Titles", DbType="NVarChar(255)")]
	public string Titles
	{
		get
		{
			return this._Titles;
		}
		set
		{
			if ((this._Titles != value))
			{
				this.OnTitlesChanging(value);
				this.SendPropertyChanging();
				this._Titles = value;
				this.SendPropertyChanged("Titles");
				this.OnTitlesChanged();
			}
		}
	}
	
	[Column(Storage="_TitlesCount", DbType="NVarChar(50)")]
	public string TitlesCount
	{
		get
		{
			return this._TitlesCount;
		}
		set
		{
			if ((this._TitlesCount != value))
			{
				this.OnTitlesCountChanging(value);
				this.SendPropertyChanging();
				this._TitlesCount = value;
				this.SendPropertyChanged("TitlesCount");
				this.OnTitlesCountChanged();
			}
		}
	}
	
	[Column(Storage="_Tags", DbType="NVarChar(255)")]
	public string Tags
	{
		get
		{
			return this._Tags;
		}
		set
		{
			if ((this._Tags != value))
			{
				this.OnTagsChanging(value);
				this.SendPropertyChanging();
				this._Tags = value;
				this.SendPropertyChanged("Tags");
				this.OnTagsChanged();
			}
		}
	}
	
	[Column(Storage="_TagsCount", DbType="NVarChar(50)")]
	public string TagsCount
	{
		get
		{
			return this._TagsCount;
		}
		set
		{
			if ((this._TagsCount != value))
			{
				this.OnTagsCountChanging(value);
				this.SendPropertyChanging();
				this._TagsCount = value;
				this.SendPropertyChanged("TagsCount");
				this.OnTagsCountChanged();
			}
		}
	}
	
	[Column(Storage="_FavorLevel", DbType="SmallInt")]
	public System.Nullable<short> FavorLevel
	{
		get
		{
			return this._FavorLevel;
		}
		set
		{
			if ((this._FavorLevel != value))
			{
				this.OnFavorLevelChanging(value);
				this.SendPropertyChanging();
				this._FavorLevel = value;
				this.SendPropertyChanged("FavorLevel");
				this.OnFavorLevelChanged();
			}
		}
	}
	
	[Column(Storage="_QueryFrequency", DbType="SmallInt")]
	public System.Nullable<short> QueryFrequency
	{
		get
		{
			return this._QueryFrequency;
		}
		set
		{
			if ((this._QueryFrequency != value))
			{
				this.OnQueryFrequencyChanging(value);
				this.SendPropertyChanging();
				this._QueryFrequency = value;
				this.SendPropertyChanged("QueryFrequency");
				this.OnQueryFrequencyChanged();
			}
		}
	}
	
	[Column(Storage="_Remarks", DbType="NVarChar(1000)")]
	public string Remarks
	{
		get
		{
			return this._Remarks;
		}
		set
		{
			if ((this._Remarks != value))
			{
				this.OnRemarksChanging(value);
				this.SendPropertyChanging();
				this._Remarks = value;
				this.SendPropertyChanged("Remarks");
				this.OnRemarksChanged();
			}
		}
	}
	
	[Column(Storage="_RemarksCount", DbType="NChar(50)")]
	public string RemarksCount
	{
		get
		{
			return this._RemarksCount;
		}
		set
		{
			if ((this._RemarksCount != value))
			{
				this.OnRemarksCountChanging(value);
				this.SendPropertyChanging();
				this._RemarksCount = value;
				this.SendPropertyChanged("RemarksCount");
				this.OnRemarksCountChanged();
			}
		}
	}
	
	[Column(Storage="_ImageUrl", DbType="NChar(200)")]
	public string ImageUrl
	{
		get
		{
			return this._ImageUrl;
		}
		set
		{
			if ((this._ImageUrl != value))
			{
				this.OnImageUrlChanging(value);
				this.SendPropertyChanging();
				this._ImageUrl = value;
				this.SendPropertyChanged("ImageUrl");
				this.OnImageUrlChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[Table(Name="dbo.Favors")]
public partial class Favors : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _FavorID;
	
	private string _Username;
	
	private string _Title;
	
	private string _Href;
	
	private string _Tag;
	
	private string _ReferSite;
	
	private System.Nullable<System.DateTime> _SubmitTime;
	
	private System.Nullable<short> _FavorLevel;
	
	private System.Nullable<System.DateTime> _LastModified;
	
	private System.Nullable<short> _Privacy;
	
	private System.Nullable<short> _VisitCount;
	
	private System.Nullable<System.DateTime> _LastVisit;
	
	private string _Remark;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFavorIDChanging(int value);
    partial void OnFavorIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnHrefChanging(string value);
    partial void OnHrefChanged();
    partial void OnTagChanging(string value);
    partial void OnTagChanged();
    partial void OnReferSiteChanging(string value);
    partial void OnReferSiteChanged();
    partial void OnSubmitTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnSubmitTimeChanged();
    partial void OnFavorLevelChanging(System.Nullable<short> value);
    partial void OnFavorLevelChanged();
    partial void OnLastModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnLastModifiedChanged();
    partial void OnPrivacyChanging(System.Nullable<short> value);
    partial void OnPrivacyChanged();
    partial void OnVisitCountChanging(System.Nullable<short> value);
    partial void OnVisitCountChanged();
    partial void OnLastVisitChanging(System.Nullable<System.DateTime> value);
    partial void OnLastVisitChanged();
    partial void OnRemarkChanging(string value);
    partial void OnRemarkChanged();
    #endregion
	
	public Favors()
	{
		OnCreated();
	}
	
	[Column(Storage="_FavorID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
	public int FavorID
	{
		get
		{
			return this._FavorID;
		}
		set
		{
			if ((this._FavorID != value))
			{
				this.OnFavorIDChanging(value);
				this.SendPropertyChanging();
				this._FavorID = value;
				this.SendPropertyChanged("FavorID");
				this.OnFavorIDChanged();
			}
		}
	}
	
	[Column(Storage="_Username", DbType="NVarChar(50)")]
	public string Username
	{
		get
		{
			return this._Username;
		}
		set
		{
			if ((this._Username != value))
			{
				this.OnUsernameChanging(value);
				this.SendPropertyChanging();
				this._Username = value;
				this.SendPropertyChanged("Username");
				this.OnUsernameChanged();
			}
		}
	}
	
	[Column(Storage="_Title", DbType="NVarChar(255)")]
	public string Title
	{
		get
		{
			return this._Title;
		}
		set
		{
			if ((this._Title != value))
			{
				this.OnTitleChanging(value);
				this.SendPropertyChanging();
				this._Title = value;
				this.SendPropertyChanged("Title");
				this.OnTitleChanged();
			}
		}
	}
	
	[Column(Storage="_Href", DbType="NVarChar(MAX)")]
	public string Href
	{
		get
		{
			return this._Href;
		}
		set
		{
			if ((this._Href != value))
			{
				this.OnHrefChanging(value);
				this.SendPropertyChanging();
				this._Href = value;
				this.SendPropertyChanged("Href");
				this.OnHrefChanged();
			}
		}
	}
	
	[Column(Storage="_Tag", DbType="NVarChar(255)")]
	public string Tag
	{
		get
		{
			return this._Tag;
		}
		set
		{
			if ((this._Tag != value))
			{
				this.OnTagChanging(value);
				this.SendPropertyChanging();
				this._Tag = value;
				this.SendPropertyChanged("Tag");
				this.OnTagChanged();
			}
		}
	}
	
	[Column(Storage="_ReferSite", DbType="NVarChar(255)")]
	public string ReferSite
	{
		get
		{
			return this._ReferSite;
		}
		set
		{
			if ((this._ReferSite != value))
			{
				this.OnReferSiteChanging(value);
				this.SendPropertyChanging();
				this._ReferSite = value;
				this.SendPropertyChanged("ReferSite");
				this.OnReferSiteChanged();
			}
		}
	}
	
	[Column(Storage="_SubmitTime", DbType="DateTime")]
	public System.Nullable<System.DateTime> SubmitTime
	{
		get
		{
			return this._SubmitTime;
		}
		set
		{
			if ((this._SubmitTime != value))
			{
				this.OnSubmitTimeChanging(value);
				this.SendPropertyChanging();
				this._SubmitTime = value;
				this.SendPropertyChanged("SubmitTime");
				this.OnSubmitTimeChanged();
			}
		}
	}
	
	[Column(Storage="_FavorLevel", DbType="SmallInt")]
	public System.Nullable<short> FavorLevel
	{
		get
		{
			return this._FavorLevel;
		}
		set
		{
			if ((this._FavorLevel != value))
			{
				this.OnFavorLevelChanging(value);
				this.SendPropertyChanging();
				this._FavorLevel = value;
				this.SendPropertyChanged("FavorLevel");
				this.OnFavorLevelChanged();
			}
		}
	}
	
	[Column(Storage="_LastModified", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastModified
	{
		get
		{
			return this._LastModified;
		}
		set
		{
			if ((this._LastModified != value))
			{
				this.OnLastModifiedChanging(value);
				this.SendPropertyChanging();
				this._LastModified = value;
				this.SendPropertyChanged("LastModified");
				this.OnLastModifiedChanged();
			}
		}
	}
	
	[Column(Storage="_Privacy", DbType="SmallInt")]
	public System.Nullable<short> Privacy
	{
		get
		{
			return this._Privacy;
		}
		set
		{
			if ((this._Privacy != value))
			{
				this.OnPrivacyChanging(value);
				this.SendPropertyChanging();
				this._Privacy = value;
				this.SendPropertyChanged("Privacy");
				this.OnPrivacyChanged();
			}
		}
	}
	
	[Column(Storage="_VisitCount", DbType="SmallInt")]
	public System.Nullable<short> VisitCount
	{
		get
		{
			return this._VisitCount;
		}
		set
		{
			if ((this._VisitCount != value))
			{
				this.OnVisitCountChanging(value);
				this.SendPropertyChanging();
				this._VisitCount = value;
				this.SendPropertyChanged("VisitCount");
				this.OnVisitCountChanged();
			}
		}
	}
	
	[Column(Storage="_LastVisit", DbType="DateTime")]
	public System.Nullable<System.DateTime> LastVisit
	{
		get
		{
			return this._LastVisit;
		}
		set
		{
			if ((this._LastVisit != value))
			{
				this.OnLastVisitChanging(value);
				this.SendPropertyChanging();
				this._LastVisit = value;
				this.SendPropertyChanged("LastVisit");
				this.OnLastVisitChanged();
			}
		}
	}
	
	[Column(Storage="_Remark", DbType="NVarChar(50)")]
	public string Remark
	{
		get
		{
			return this._Remark;
		}
		set
		{
			if ((this._Remark != value))
			{
				this.OnRemarkChanging(value);
				this.SendPropertyChanging();
				this._Remark = value;
				this.SendPropertyChanged("Remark");
				this.OnRemarkChanged();
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}
#pragma warning restore 1591
